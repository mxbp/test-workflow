---
name: Test workflow
# FIXME: github.event.repository.default_branch = "main"
on:
  push:
    branches:
      - develop
      - release/**
      - hotfix/**
  pull_request:
    branches:
      - develop
      - release/**
      - hotfix/**
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment for deploy"
        required: false
        type: choice
        options:
          - sandbox
          - develop
          - quality_assurance
          - user_acceptance_testing
          - production
env:
  GH_ENV_SBX: "sandbox"
  GH_ENV_DEV: "develop"
  GH_ENV_TST: "quality_assurance"
  GH_ENV_STG: "user_acceptance_testing"
  GH_ENV_PROD: "production"
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Build
        run: echo "Test build"
  check_environment:
    name: Check Environment
    runs-on: ubuntu-latest
    needs: build
    if: success()
    outputs:
      description: ${{ steps.description.outputs.description }}
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get environment
        id: environment
        env:
          GH_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GH_CURRENT_BRANCH: ${{ github.ref_name }}
          GH_INPUT_ENVIRONMENT: ${{ inputs.environment }}
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/mxbp/test-workflow/main/.github/environment.sh)"
      - name: Get repo description
        id: description
        run: |
          #!/bin/bash

          response=$(curl --silent --header 'Authorization: token ${{ github.token }}' \
            'https://api.github.com/repos/${{ github.repository }}' | jq --raw-output '.description')

          echo "description=$response" >> "$GITHUB_OUTPUT"

          echo "::group::Debug Info"
          echo "Description - $response"
          echo "::endgroup::"
      - name: Generate list using Markdown
        run: |
          echo "Info :speech_balloon:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Branch             - ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Environment        - ${{ steps.environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "Default branch     - ${{ github.event.repository.default_branch }}" >> $GITHUB_STEP_SUMMARY
  deploy:
    name: Deploy to ${{ needs.check_environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: check_environment
    if: success()
    environment: ${{ needs.check_environment.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Debug Info
        run: |
          echo "Description        - ${{ needs.check_environment.outputs.description }}"
          echo "Stage              - ${{ vars.STAGE }}"
          echo "Default branch     - ${{ github.event.repository.default_branch }}"
          echo "URL                - https://www.google.com" >> $GITHUB_STEP_SUMMARY
          echo "URL link           - [www.google.com](https://www.google.com)" >> $GITHUB_STEP_SUMMARY
      - name: Deploy
        id: deploy
        run: echo "Test deploy"
      - name: Create/update PR from '${{ github.ref_name }}' to '${{ github.event.repository.default_branch }}'
        # TODO: README.md :: Settings > Actions > General > Workflow permissions > Allow GitHub Actions to create and
        # approve pull requests
        if: >
          always() &&
          (startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/'))
        env:
          GH_TOKEN: ${{ github.token }}
          GH_ENVIRONMENT: ${{ needs.check_environment.outputs.environment }}
          GH_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GH_DEPLOY_STATUS: ${{ steps.deploy.outcome }}
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/mxbp/test-workflow/main/.github/pr.sh)"

      # - name: Create labels
      #   if: success() && (startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/'))
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #   run: |
      #     gh_label() {
      #       gh label create "$@" --force
      #     }
      #     gh_label sandbox --description "Sandbox" --color 2E86C1
      #     gh_label develop --description "Develop" --color 229954
      #     gh_label quality_assurance --description "Quality Assurance" --color D4AC0D
      #     gh_label user_acceptance_testing --description "User Acceptance Testing" --color BA4A00
