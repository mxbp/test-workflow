---
name: Test workflow
# FIXME: github.event.repository.default_branch = "main"
on:
  push:
    branches:
      - develop
      - release/**
      - hotfix/**
  pull_request:
    branches:
      - develop
      - release/**
      - hotfix/**
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment for deploy"
        required: false
        type: choice
        options:
          - sandbox
          - develop
          - quality_assurance
          - user_acceptance_testing
          - production
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Build
        run: echo "Test build"
  check_environment:
    name: Check Environment
    runs-on: ubuntu-latest
    needs: build
    if: success()
    outputs:
      description: ${{ steps.description.outputs.description }}
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get environment
        id: environment
        run: |
          #!/bin/bash

          set GITHUB_ENVIRONMENT

          # Manual trigger - workflow_dispatch
          if [[ "${{ inputs.environment }}" != "" ]]; then
            GITHUB_ENVIRONMENT=$(echo "${{ inputs.environment }}" | tr [:upper:] [:lower:])
            GITHUB_DEFAULT_BRANCH=${{ github.event.repository.default_branch }}

            # The PROD environment can use the $GITHUB_DEFAULT_BRANCH branches
            if [[ "$GITHUB_ENVIRONMENT" =~ ^(production|prod)$ &&
                "${{ github.ref_name }}" == "$GITHUB_DEFAULT_BRANCH" ]]; then :

            # QA and UAT environments can use the $GITHUB_DEFAULT_BRANCH and release/hotfix branches
            elif [[ "$GITHUB_ENVIRONMENT" =~ ^(quality_assurance|qa|user_acceptance_testing|uat)$ &&
                "${{ github.ref_name }}" =~ ^(release|hotfix|$GITHUB_DEFAULT_BRANCH)\/?([a-zA-Z0-9._-]*)$ ]]; then :

            # The DEVELOP environment can use the main/master, release/hotfix and develop branches
            elif [[ "$GITHUB_ENVIRONMENT" == "develop" &&
                "${{ github.ref_name }}" =~ ^(develop|release|hotfix|$GITHUB_DEFAULT_BRANCH)\/?([a-zA-Z0-9._-]*)$ ]]; then :

            # The SANDBOX environment can use all branches
            elif [[ "$GITHUB_ENVIRONMENT" == "sandbox" ]]; then :

            # Exit on invalid condition
            else
              echo -e "::error::Incorrect environment has been selected.
              Cannot use environment '${{ inputs.environment }}' for branch '${{ github.ref_name }}' üëé"
              exit 1
            fi

            # Break
            GITHUB_ENVIRONMENT=${{ inputs.environment }}

          # Automated trigger - workflow_call
          # DEVELOP environment can use the develop branch
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            GITHUB_ENVIRONMENT=develop
          # QA environments can use release/hotfix branches
          elif [[ "${{ github.ref_name }}" =~ ^(release|hotfix)\/([0-9.]*)$ ]]; then
            GITHUB_ENVIRONMENT=quality_assurance
          else
            echo "::error::Cannot define the environment for '${{ github.ref_name }}' branch üëé"
            exit 1
          fi

          echo "::group::Debug Info"
          echo "Branch      - ${{ github.ref_name }} üëç"
          echo "Environment - $GITHUB_ENVIRONMENT üëç"
          echo "environment=$GITHUB_ENVIRONMENT" >> "$GITHUB_OUTPUT"
          echo "::endgroup::"
      - name: Get repo description
        id: description
        run: |
          #!/bin/bash

          response=$(curl --silent --header 'Authorization: token ${{ github.token }}' \
            'https://api.github.com/repos/${{ github.repository }}' | jq --raw-output '.description')

          echo "::group::Debug Info"
          echo "Description - $response"
          echo "description=$response" >> "$GITHUB_OUTPUT"
          echo "::endgroup::"
      - name: Generate list using Markdown
        run: |
          echo "Info :speech_balloon:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Branch             - ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Environment        - ${{ steps.environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "Default branch     - ${{ github.event.repository.default_branch }}" >> $GITHUB_STEP_SUMMARY
  deploy:
    name: Deploy to ${{ needs.check_environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: check_environment
    if: success()
    environment: ${{ needs.check_environment.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Debug Info
        run: |
          echo "Description        - ${{ needs.check_environment.outputs.description }}"
          echo "Stage              - ${{ vars.STAGE }}"
          echo "Default branch     - ${{ github.event.repository.default_branch }}"
          echo "URL                - https://www.google.com" >> $GITHUB_STEP_SUMMARY
          echo "URL link           - [www.google.com](https://www.google.com)" >> $GITHUB_STEP_SUMMARY
      - name: Deploy
        id: deploy
        run: echo "Test deploy"
      - name: Create/update PR from '${{ github.ref_name }}' to '${{ github.event.repository.default_branch }}'
        # TODO: README.md :: Settings > Actions > General > Workflow permissions > Allow GitHub Actions to create and
        # approve pull requests
        if: >
          always() &&
          (startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/'))
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_ENVIRONMENT: ${{ needs.check_environment.outputs.environment }}
        run: |
          #!/bin/bash

          set GITHUB_PR_MESSAGE
          set GITHUB_PR_STATUS
          set GITHUB_PR_ACTION

          # Create or edit a pull request
          gh pr create --draft --fill \
            --base "${{ github.event.repository.default_branch }}" \
            --title "Release v${GITHUB_REF_NAME##*/}" && GITHUB_PR_MESSAGE="PR was created and marked as a draft" || \
            gh pr edit \
              --base "${{ github.event.repository.default_branch }}" \
              --title "Release v${GITHUB_REF_NAME##*/}" && GITHUB_PR_MESSAGE="PR was updated"

          # Get deployment outcome. Change PR status to draft if deployment fails
          if [[ ${{ steps.deploy.outcome }} == "success" ]]; then
            GITHUB_PR_ACTION="add"
          else
            gh pr ready --undo
            GITHUB_PR_ACTION="remove"
          fi

          # Update labels based on deployment outcome
          gh pr edit --${GITHUB_PR_ACTION}-label "$GITHUB_ENVIRONMENT" && \
            GITHUB_PR_MESSAGE+=", label ${GITHUB_PR_ACTION}ed - $GITHUB_ENVIRONMENT"

          # Reset label status and move PR to draft if deploying to QA environment
          if [[ "$GITHUB_ENVIRONMENT" =~ ^(quality_assurance|qa)$ ]]; then
            gh pr edit --remove-label "user_acceptance_testing" && \
              GITHUB_PR_MESSAGE+=", label removed - user_acceptance_testing"
            gh pr ready --undo
          fi

          # Check for specific labels and update PR status
          labels=$(gh pr view --json labels --jq '.labels[].name')
          # TODO: Make the condition more flexible
          if echo "$labels" | grep -q 'quality_assurance' && echo "$labels" | grep -q 'user_acceptance_testing'; then
            gh pr ready && GITHUB_PR_STATUS="Pull request has been updated, marked as 'ready for review' üëç"
          else
            if [[ "$GITHUB_ENVIRONMENT" =~ ^(quality_assurance|qa)$ ]]; then
              GITHUB_PR_STATUS="::notice::Check that your application has been successfully deployed to 'user_acceptance_testing' environment"
            elif [[ "$GITHUB_ENVIRONMENT" =~ ^(user_acceptance_testing|uat)$ ]]; then
              GITHUB_PR_STATUS="::warning::Check that your application has been successfully deployed to 'quality_assurance' environment"
            else
              GITHUB_PR_STATUS="::warning::Check that your application has been successfully deployed to 'quality_assurance' and 'user_acceptance_testing' environments"
            fi
          fi

          echo "::group::Debug Info"
          echo "$GITHUB_PR_MESSAGE"
          echo "$GITHUB_PR_STATUS"
          echo "::endgroup::"

      # - name: Create labels
      #   if: success() && (startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/'))
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #   run: |
      #     gh_label() {
      #       gh label create "$@" --force
      #     }
      #     gh_label sandbox --description "Sandbox" --color 2E86C1
      #     gh_label develop --description "Develop" --color 229954
      #     gh_label quality_assurance --description "Quality Assurance" --color D4AC0D
      #     gh_label user_acceptance_testing --description "User Acceptance Testing" --color BA4A00
